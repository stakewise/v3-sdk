/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IKeeperRewards {
  export type HarvestParamsStruct = {
    rewardsRoot: BytesLike;
    reward: BigNumberish;
    unlockedMevReward: BigNumberish;
    proof: BytesLike[];
  };

  export type HarvestParamsStructOutput = [
    rewardsRoot: string,
    reward: bigint,
    unlockedMevReward: bigint,
    proof: string[]
  ] & {
    rewardsRoot: string;
    reward: bigint;
    unlockedMevReward: bigint;
    proof: string[];
  };
}

export interface OtherTokenVaultAbiInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "osTokenPositions"
      | "burnOsToken"
      | "mintOsToken"
      | "convertToAssets"
      | "getExitQueueIndex"
      | "calculateExitedAssets"
      | "claimExitedAssets"
      | "updateStateAndDeposit"
      | "deposit"
      | "convertToShares"
      | "enterExitQueue"
      | "redeem"
      | "setValidatorsRoot"
      | "multicall"
      | "getShares"
      | "updateState"
      | "setMetadata"
      | "setFeeRecipient"
      | "setKeysManager"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "osTokenPositions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "burnOsToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintOsToken",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "convertToAssets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getExitQueueIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateExitedAssets",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimExitedAssets",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStateAndDeposit",
    values: [AddressLike, AddressLike, IKeeperRewards.HarvestParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "convertToShares",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "enterExitQueue",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setValidatorsRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getShares",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateState",
    values: [IKeeperRewards.HarvestParamsStruct]
  ): string;
  encodeFunctionData(functionFragment: "setMetadata", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setFeeRecipient",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setKeysManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "osTokenPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnOsToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintOsToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertToAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExitQueueIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateExitedAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimExitedAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStateAndDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "convertToShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enterExitQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setValidatorsRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getShares", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setKeysManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export interface OtherTokenVaultAbi extends BaseContract {
  connect(runner?: ContractRunner | null): OtherTokenVaultAbi;
  waitForDeployment(): Promise<this>;

  interface: OtherTokenVaultAbiInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  osTokenPositions: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  burnOsToken: TypedContractMethod<
    [osTokenShares: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  mintOsToken: TypedContractMethod<
    [receiver: AddressLike, osTokenShares: BigNumberish, referrer: AddressLike],
    [bigint],
    "nonpayable"
  >;

  convertToAssets: TypedContractMethod<
    [shares: BigNumberish],
    [bigint],
    "view"
  >;

  getExitQueueIndex: TypedContractMethod<
    [positionTicket: BigNumberish],
    [bigint],
    "view"
  >;

  calculateExitedAssets: TypedContractMethod<
    [
      receiver: AddressLike,
      positionTicket: BigNumberish,
      timestamp: BigNumberish,
      exitQueueIndex: BigNumberish
    ],
    [
      [bigint, bigint, bigint] & {
        leftTickets: bigint;
        exitedTickets: bigint;
        exitedAssets: bigint;
      }
    ],
    "view"
  >;

  claimExitedAssets: TypedContractMethod<
    [
      positionTicket: BigNumberish,
      timestamp: BigNumberish,
      exitQueueIndex: BigNumberish
    ],
    [
      [bigint, bigint, bigint] & {
        newPositionTicket: bigint;
        claimedShares: bigint;
        claimedAssets: bigint;
      }
    ],
    "nonpayable"
  >;

  updateStateAndDeposit: TypedContractMethod<
    [
      receiver: AddressLike,
      referrer: AddressLike,
      harvestParams: IKeeperRewards.HarvestParamsStruct
    ],
    [bigint],
    "payable"
  >;

  deposit: TypedContractMethod<
    [assets: BigNumberish, receiver: AddressLike, referrer: AddressLike],
    [bigint],
    "payable"
  >;

  convertToShares: TypedContractMethod<
    [assets: BigNumberish],
    [bigint],
    "view"
  >;

  enterExitQueue: TypedContractMethod<
    [shares: BigNumberish, receiver: AddressLike],
    [bigint],
    "nonpayable"
  >;

  redeem: TypedContractMethod<
    [shares: BigNumberish, receiver: AddressLike],
    [bigint],
    "nonpayable"
  >;

  setValidatorsRoot: TypedContractMethod<
    [_validatorsRoot: BytesLike],
    [void],
    "nonpayable"
  >;

  multicall: TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;

  getShares: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  updateState: TypedContractMethod<
    [harvestParams: IKeeperRewards.HarvestParamsStruct],
    [void],
    "nonpayable"
  >;

  setMetadata: TypedContractMethod<
    [metadataIpfsHash: string],
    [void],
    "nonpayable"
  >;

  setFeeRecipient: TypedContractMethod<
    [_feeRecipient: AddressLike],
    [void],
    "nonpayable"
  >;

  setKeysManager: TypedContractMethod<
    [_keysManager: AddressLike],
    [void],
    "nonpayable"
  >;

  version: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "osTokenPositions"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "burnOsToken"
  ): TypedContractMethod<[osTokenShares: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "mintOsToken"
  ): TypedContractMethod<
    [receiver: AddressLike, osTokenShares: BigNumberish, referrer: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "convertToAssets"
  ): TypedContractMethod<[shares: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getExitQueueIndex"
  ): TypedContractMethod<[positionTicket: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateExitedAssets"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      positionTicket: BigNumberish,
      timestamp: BigNumberish,
      exitQueueIndex: BigNumberish
    ],
    [
      [bigint, bigint, bigint] & {
        leftTickets: bigint;
        exitedTickets: bigint;
        exitedAssets: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimExitedAssets"
  ): TypedContractMethod<
    [
      positionTicket: BigNumberish,
      timestamp: BigNumberish,
      exitQueueIndex: BigNumberish
    ],
    [
      [bigint, bigint, bigint] & {
        newPositionTicket: bigint;
        claimedShares: bigint;
        claimedAssets: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateStateAndDeposit"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      referrer: AddressLike,
      harvestParams: IKeeperRewards.HarvestParamsStruct
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [assets: BigNumberish, receiver: AddressLike, referrer: AddressLike],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "convertToShares"
  ): TypedContractMethod<[assets: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "enterExitQueue"
  ): TypedContractMethod<
    [shares: BigNumberish, receiver: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redeem"
  ): TypedContractMethod<
    [shares: BigNumberish, receiver: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setValidatorsRoot"
  ): TypedContractMethod<[_validatorsRoot: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "multicall"
  ): TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;
  getFunction(
    nameOrSignature: "getShares"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateState"
  ): TypedContractMethod<
    [harvestParams: IKeeperRewards.HarvestParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMetadata"
  ): TypedContractMethod<[metadataIpfsHash: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeeRecipient"
  ): TypedContractMethod<[_feeRecipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setKeysManager"
  ): TypedContractMethod<[_keysManager: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
