/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IKeeperRewards {
  export type HarvestParamsStruct = {
    rewardsRoot: BytesLike;
    reward: BigNumberish;
    unlockedMevReward: BigNumberish;
    proof: BytesLike[];
  };

  export type HarvestParamsStructOutput = [
    rewardsRoot: string,
    reward: bigint,
    unlockedMevReward: bigint,
    proof: string[]
  ] & {
    rewardsRoot: string;
    reward: bigint;
    unlockedMevReward: bigint;
    proof: string[];
  };
}

export interface GenesisVaultDiffAbiInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "depositAndMintOsToken"
      | "updateStateAndDepositAndMintOsToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "depositAndMintOsToken",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStateAndDepositAndMintOsToken",
    values: [
      AddressLike,
      BigNumberish,
      AddressLike,
      IKeeperRewards.HarvestParamsStruct
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "depositAndMintOsToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStateAndDepositAndMintOsToken",
    data: BytesLike
  ): Result;
}

export interface GenesisVaultDiffAbi extends BaseContract {
  connect(runner?: ContractRunner | null): GenesisVaultDiffAbi;
  waitForDeployment(): Promise<this>;

  interface: GenesisVaultDiffAbiInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  depositAndMintOsToken: TypedContractMethod<
    [receiver: AddressLike, osTokenShares: BigNumberish, referrer: AddressLike],
    [bigint],
    "payable"
  >;

  updateStateAndDepositAndMintOsToken: TypedContractMethod<
    [
      receiver: AddressLike,
      osTokenShares: BigNumberish,
      referrer: AddressLike,
      harvestParams: IKeeperRewards.HarvestParamsStruct
    ],
    [bigint],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "depositAndMintOsToken"
  ): TypedContractMethod<
    [receiver: AddressLike, osTokenShares: BigNumberish, referrer: AddressLike],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "updateStateAndDepositAndMintOsToken"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      osTokenShares: BigNumberish,
      referrer: AddressLike,
      harvestParams: IKeeperRewards.HarvestParamsStruct
    ],
    [bigint],
    "payable"
  >;

  filters: {};
}
